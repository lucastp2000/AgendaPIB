# Importação de bibliotecas necessárias para o funcionamento do script
import tkinter as tk
from tkinter import messagebox
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import StaleElementReferenceException, TimeoutException, NoSuchElementException
import pandas as pd
from openpyxl import load_workbook
from openpyxl.cell.cell import MergedCell
from datetime import datetime, timedelta, time
import time as time_module
import shutil
import os
import locale
from tkcalendar import Calendar

# Configuração da localidade para usar formatação de data em português brasileiro
locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')

# Bloco: Função para obter o intervalo de datas do usuário via interface gráfica com botões e campos de texto
def get_date_range():
    start_date, end_date = None, None
    start_date_str, end_date_str = None, None

    def open_calendar_start():
        def select_start_date():
            nonlocal start_date_str
            start_date_str = cal.get_date()
            try:
                start_dt = datetime.strptime(start_date_str, "%d/%m/%Y")
                today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                if start_dt < today:
                    raise ValueError("A data inicial não pode ser anterior a hoje.")
                start_entry.delete(0, tk.END)
                start_entry.insert(0, start_date_str)
                start_label.config(text=f"Data Inicial: {start_date_str}")
                cal_window.destroy()
            except ValueError as e:
                messagebox.showerror("Erro", str(e))

        cal_window = tk.Toplevel(root)
        cal_window.title("Selecionar Data Inicial")
        cal_window.geometry("300x300")
        cal = Calendar(cal_window, selectmode="day", year=2025, month=6, day=19, date_pattern="dd/mm/yyyy")
        cal.pack(pady=10)
        tk.Button(cal_window, text="Confirmar", command=select_start_date).pack(pady=10)

    def open_calendar_end():
        def select_end_date():
            nonlocal end_date_str
            end_date_str = cal.get_date()
            try:
                end_dt = datetime.strptime(end_date_str, "%d/%m/%Y")
                if start_date_str:
                    start_dt = datetime.strptime(start_date_str, "%d/%m/%Y")
                    if end_dt < start_dt:
                        raise ValueError("A data final não pode ser anterior à data inicial.")
                end_entry.delete(0, tk.END)
                end_entry.insert(0, end_date_str)
                end_label.config(text=f"Data Final: {end_date_str}")
                cal_window.destroy()
            except ValueError as e:
                messagebox.showerror("Erro", str(e))

        cal_window = tk.Toplevel(root)
        cal_window.title("Selecionar Data Final")
        cal_window.geometry("300x300")
        cal = Calendar(cal_window, selectmode="day", year=2025, month=6, day=19, date_pattern="dd/mm/yyyy")
        cal.pack(pady=10)
        tk.Button(cal_window, text="Confirmar", command=select_end_date).pack(pady=10)

    def on_confirm():
        nonlocal start_date, end_date, start_date_str, end_date_str
        start_date_str = start_entry.get().strip()
        end_date_str = end_entry.get().strip()

        if not start_date_str or not end_date_str:
            messagebox.showerror("Erro", "Por favor, preencha ou selecione ambas as datas.")
            return

        try:
            start_date = datetime.strptime(start_date_str, "%d/%m/%Y")
            end_date = datetime.strptime(end_date_str, "%d/%m/%Y")
            today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            if start_date < today:
                raise ValueError("A data inicial não pode ser anterior a hoje.")
            if end_date < start_date:
                raise ValueError("A data final não pode ser anterior à data inicial.")
            root.destroy()
        except ValueError as e:
            messagebox.showerror("Erro", f"Erro na formatação das datas: {str(e)}. Use o formato DD/MM/AAAA.")
            return

    root = tk.Tk()
    root.title("Configuração da Agenda")
    root.geometry("600x400")

    # Data inicial
    tk.Label(root, text="Data Inicial (DD/MM/AAAA) ou selecione:").pack(pady=10)
    start_entry = tk.Entry(root, width=15)
    start_entry.pack(pady=5)
    start_label = tk.Label(root, text="Data Inicial: Não selecionada")
    start_label.pack(pady=5)
    tk.Button(root, text="Escolher Data Inicial", command=open_calendar_start).pack(pady=10)

    # Data final
    tk.Label(root, text="Data Final (DD/MM/AAAA) ou selecione:").pack(pady=10)
    end_entry = tk.Entry(root, width=15)
    end_entry.pack(pady=5)
    end_label = tk.Label(root, text="Data Final: Não selecionada")
    end_label.pack(pady=5)
    tk.Button(root, text="Escolher Data Final", command=open_calendar_end).pack(pady=10)

    # Botão de confirmação
    tk.Button(root, text="Confirmar", command=on_confirm).pack(pady=20)

    root.protocol("WM_DELETE_WINDOW", lambda: messagebox.showwarning("Aviso", "Por favor, confirme as datas antes de fechar."))
    root.mainloop()

    if start_date is None or end_date is None:
        messagebox.showerror("Erro", "Nenhuma configuração válida de datas foi selecionada. O programa será encerrado.")
        exit(1)
    return start_date, end_date

# Bloco: Função para preparar as linhas da planilha com base nos dados coletados
def prepare_rows(ws, dados):
    periods = {
        'manhã': {'start_row': 4, 'end_time': time(12, 59), 'count': 0},
        'tarde': {'start_row': 19, 'start_time': time(13, 0), 'end_time': time(17, 59), 'count': 0},
        'noite': {'start_row': 34, 'start_time': time(18, 0), 'end_time': time(23, 0), 'count': 0}
    }

    for d in dados:
        inicio = datetime.strptime(d['Início'], "%H:%M").time()
        if time(6, 0) <= inicio <= periods['manhã']['end_time']:
            periods['manhã']['count'] += 1
        elif periods['tarde']['start_time'] <= inicio <= periods['tarde']['end_time']:
            periods['tarde']['count'] += 1
        elif periods['noite']['start_time'] <= inicio <= periods['noite']['end_time']:
            periods['noite']['count'] += 1

# Bloco: Configuração inicial do navegador e execução principal
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--log-level=3")

try:
    driver = webdriver.Chrome(options=chrome_options)
    driver.set_window_size(1920, 1080)
    driver.get("https://agendapib.pibcuritiba.org.br/detalhes/")
    print("Navegador iniciado e página acessada.")
except Exception as e:
    print(f"Erro ao iniciar o navegador ou acessar a página: {e} ({type(e).__name__})")
    exit(1)

wait = WebDriverWait(driver, 30)
start_date, end_date = get_date_range()
print(f"Intervalo de datas: {start_date.strftime('%d/%m/%Y')} a {end_date.strftime('%d/%m/%Y')}")

current_date = start_date
while current_date <= end_date:
    data_formatada = current_date.strftime("%d/%m/%Y")
    data_arquivo = current_date.strftime("%d-%m-%Y")
    print(f"Processando data: {data_formatada}")

    retries = 3
    for attempt in range(retries):
        try:
            print(f"Tentativa {attempt + 1} para {data_formatada}")
            input_data_inicio = wait.until(EC.element_to_be_clickable((By.ID, "dtAgendaI")))
            input_data_fim = wait.until(EC.element_to_be_clickable((By.ID, "dtAgendaF")))
            botao = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'input.btn.btn-primary[type="submit"]')))

            input_data_inicio.clear()
            input_data_inicio.send_keys(data_formatada)
            input_data_fim.clear()
            input_data_fim.send_keys(data_formatada)
            botao.click()
            print("Formulário submetido.")

            time_module.sleep(20)
            select_element = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[@id='tableCalendar_length']//select")))
            select = Select(select_element)
            select.select_by_value("-1")
            print("Filtro de exibição ajustado.")

            time_module.sleep(20)
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#tableCalendar tbody tr")))
            print("Tabela carregada.")

            dados = []
            table = driver.find_element(By.CSS_SELECTOR, "#tableCalendar tbody")
            rows = driver.find_elements(By.CSS_SELECTOR, "#tableCalendar tbody tr")
            print(f"Número de linhas encontradas: {len(rows)}")
            for row in rows:
                try:
                    cols = row.find_elements(By.TAG_NAME, "td")
                    if len(cols) >= 8:
                        Data = cols[0].text.strip()
                        inicio = cols[1].text.strip()
                        fim = cols[2].text.strip()
                        evento = cols[3].text.strip()
                        sala = cols[4].text.strip()
                        area = cols[5].text.strip()
                        som = cols[7].get_attribute("textContent").strip()
                        if som and som != "":
                            print(f"Dado coletado: {inicio} - {evento} - {som}")
                            dados.append({
                                'Início': inicio,
                                'Fim': fim,
                                'Evento': evento,
                                'Sala': sala,
                                'Área': area,
                                'Som': som,
                            })
                except Exception as e:
                    print(f"Erro ao processar linha: {e}")
                    continue

            print(f"Dados coletados: {dados}")
            if not dados:
                print(f"Nenhum evento com 'Som' encontrado para {data_formatada}. Pulando...")
                break

            modelo = "AGENDA PADRAO.xlsx"
            if not os.path.exists(modelo):
                print(f"Modelo não encontrado: {modelo}")
                exit(1)

            novo_arquivo = f"AGENDA_{data_arquivo}.xlsx"
            shutil.copyfile(modelo, novo_arquivo)
            print(f"Modelo copiado para {novo_arquivo}")

            try:
                wb = load_workbook(novo_arquivo)
                ws = wb.active

                # Preenchimento do cabeçalho
                dia_semana = current_date.strftime('%A').capitalize()
                data_cabecalho = current_date.strftime('%d/%m')
                header_cell = ws.cell(row=1, column=1)
                if not isinstance(header_cell, MergedCell):
                    ws.cell(row=1, column=1).value = f"Agenda {data_cabecalho}({dia_semana})"
                print("Cabeçalho preenchido.")

                # Preparação dos períodos com base nos dados
                periods = {
                    'manhã': {'start_row': 4, 'end_time': time(12, 59), 'last_row': 4, 'count': 0},
                    'tarde': {'start_row': 19, 'start_time': time(13, 0), 'end_time': time(17, 59), 'last_row': 19, 'count': 0},
                    'noite': {'start_row': 34, 'start_time': time(18, 0), 'end_time': time(23, 0), 'last_row': 34, 'count': 0}
                }

                for d in dados:
                    inicio = datetime.strptime(d['Início'], "%H:%M").time()
                    if time(6, 0) <= inicio <= periods['manhã']['end_time']:
                        periods['manhã']['count'] += 1
                    elif periods['tarde']['start_time'] <= inicio <= periods['tarde']['end_time']:
                        periods['tarde']['count'] += 1
                    elif periods['noite']['start_time'] <= inicio <= periods['noite']['end_time']:
                        periods['noite']['count'] += 1

                # Preenchimento dos dados nos períodos
                column_mapping = [1, 2, 3, 4, 5, 6, 7]
                for i, row_data in enumerate(dados):
                    inicio_time = datetime.strptime(row_data['Início'], "%H:%M").time()
                    for period in ['manhã', 'tarde', 'noite']:
                        if ('start_time' not in periods[period] or inicio_time >= periods[period]['start_time']) and inicio_time <= periods[period]['end_time']:
                            idx = periods[period]['last_row']
                            max_attempts = min(10, len(dados) - i)
                            attempts = 0
                            while attempts < max_attempts and (isinstance(ws.cell(row=idx, column=1), MergedCell) or idx > ws.max_row):
                                idx += 1
                                attempts += 1
                            if attempts >= max_attempts:
                                print(f"Máximo de tentativas atingido para {row_data['Início']} - {row_data['Evento']}. Pulando...")
                                continue
                            periods[period]['last_row'] = idx + 1
                            for col_idx, key in enumerate(['Início', 'Fim', '', 'Evento', 'Sala', 'Área', 'Som']):
                                cell = ws.cell(row=idx, column=column_mapping[col_idx])
                                if not isinstance(cell, MergedCell):
                                    cell.value = row_data[key] if key else ""
                            print(f"Preenchido: {row_data['Início']} - {row_data['Evento']}")
                            break

                wb.save(novo_arquivo)
                print(f"Arquivo salvo: {novo_arquivo}")
            except PermissionError:
                print(f"Erro: O arquivo {novo_arquivo} está aberto. Feche-o e tente novamente ou aguarde 5 segundos.")
                time_module.sleep(5)
                continue
            except Exception as e:
                print(f"Erro ao salvar o arquivo {novo_arquivo}: {e}")
                continue

            break

        except (StaleElementReferenceException, TimeoutException) as e:
            if attempt < retries - 1:
                print(f"Tentativa {attempt + 1} falhou para {data_formatada}: {e}. Tentando novamente...")
                time_module.sleep(5)
                continue
            print(f"Erro ao processar {data_formatada} após {retries} tentativas: {e}")
            break
        except Exception as e:
            print(f"Erro inesperado ao processar {data_formatada}: {e}")
            break

    current_date += timedelta(days=1)

driver.quit()
print("Script finalizado.")